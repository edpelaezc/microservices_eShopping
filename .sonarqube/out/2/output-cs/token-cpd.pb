î
{/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Data/BrandContextSeed.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Data! %
;% &
public 
static 
class 
BrandContextSeed $
{ 
public		 

static		 
void		 
SeedData		 
(		  
IMongoCollection		  0
<		0 1
ProductBrand		1 =
>		= >
brandCollection		? N
)		N O
{

 
bool 
checkBrands 
= 
brandCollection *
.* +
Find+ /
(/ 0
b0 1
=>2 4
true5 9
)9 :
.: ;
Any; >
(> ?
)? @
;@ A
string 
path 
= 
Path 
. 
Combine "
(" #
$str# )
,) *
$str+ 5
,5 6
$str7 D
)D E
;E F
if 

( 
! 
checkBrands 
) 
{ 	
var 

brandsData 
= 
File !
.! "
ReadAllText" -
(- .
path. 2
)2 3
;3 4
var 
brands 
= 
JsonSerializer '
.' (
Deserialize( 3
<3 4
List4 8
<8 9
ProductBrand9 E
>E F
>F G
(G H

brandsDataH R
)R S
;S T
if 
( 
brands 
is 
not 
null "
)" #
{ 
foreach 
( 
var 
item !
in" $
brands% +
)+ ,
{ 
brandCollection #
.# $
InsertOneAsync$ 2
(2 3
item3 7
)7 8
;8 9
} 
} 
} 	
} 
} Ž
y/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Data/CatalogContext.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Data! %
;% &
public 
class 
CatalogContext 
: 
ICatalogContext -
{ 
public		 

IMongoCollection		 
<		 
Product		 #
>		# $
Products		% -
{		. /
get		0 3
;		3 4
}		5 6
public

 

IMongoCollection

 
<

 
ProductBrand

 (
>

( )
Brands

* 0
{

1 2
get

3 6
;

6 7
}

8 9
public 

IMongoCollection 
< 
ProductType '
>' (
Types) .
{/ 0
get1 4
;4 5
}6 7
public 

CatalogContext 
( 
IConfiguration (
configuration) 6
)6 7
{ 
var 
client 
= 
new 
MongoClient $
($ %
configuration% 2
.2 3
GetValue3 ;
<; <
string< B
>B C
(C D
$strD g
)g h
)h i
;i j
var 
database 
= 
client 
. 
GetDatabase )
() *
configuration* 7
.7 8
GetValue8 @
<@ A
stringA G
>G H
(H I
$strI h
)h i
)i j
;j k
Brands 
= 
database 
. 
GetCollection '
<' (
ProductBrand( 4
>4 5
(5 6
configuration 
. 
GetValue "
<" #
string# )
>) *
(* +
$str+ N
)N O
)O P
;P Q
Types 
= 
database 
. 
GetCollection &
<& '
ProductType' 2
>2 3
(3 4
configuration 
. 
GetValue "
<" #
string# )
>) *
(* +
$str+ M
)M N
)N O
;O P
Products 
= 
database 
. 
GetCollection )
<) *
Product* 1
>1 2
(2 3
configuration 
. 
GetValue "
<" #
string# )
>) *
(* +
$str+ L
)L M
)M N
;N O
BrandContextSeed 
. 
SeedData !
(! "
Brands" (
)( )
;) *
TypeContextSeed 
. 
SeedData  
(  !
Types! &
)& '
;' (
ProductContextSeed 
. 
SeedData #
(# $
Products$ ,
), -
;- .
} 
} Ô
z/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Data/ICatalogContext.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Data! %
;% &
public 
	interface 
ICatalogContext  
{ 
IMongoCollection 
< 
Product 
> 
Products &
{' (
get) ,
;, -
}. /
IMongoCollection		 
<		 
ProductBrand		 !
>		! "
Brands		# )
{		* +
get		, /
;		/ 0
}		1 2
IMongoCollection

 
<

 
ProductType

  
>

  !
Types

" '
{

( )
get

* -
;

- .
}

/ 0
} ü
}/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Data/ProductContextSeed.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Data! %
;% &
public 
static 
class 
ProductContextSeed &
{ 
public		 

static		 
void		 
SeedData		 
(		  
IMongoCollection		  0
<		0 1
Product		1 8
>		8 9
productCollection		: K
)		K L
{

 
bool 
checkProducts 
= 
productCollection .
.. /
Find/ 3
(3 4
b4 5
=>6 8
true9 =
)= >
.> ?
Any? B
(B C
)C D
;D E
string 
path 
= 
Path 
. 
Combine "
(" #
$str# )
,) *
$str+ 5
,5 6
$str7 F
)F G
;G H
if 

( 
! 
checkProducts 
) 
{ 	
var 
productsData 
= 
File #
.# $
ReadAllText$ /
(/ 0
path0 4
)4 5
;5 6
var 
products 
= 
JsonSerializer )
.) *
Deserialize* 5
<5 6
List6 :
<: ;
Product; B
>B C
>C D
(D E
productsDataE Q
)Q R
;R S
if 
( 
products 
is 
not 
null  $
)$ %
{ 
foreach 
( 
var 
item !
in" $
products% -
)- .
{ 
productCollection %
.% &
InsertOneAsync& 4
(4 5
item5 9
)9 :
;: ;
} 
} 
} 	
} 
} à
z/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Data/TypeContextSeed.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Data! %
;% &
public 
static 
class 
TypeContextSeed #
{ 
public		 

static		 
void		 
SeedData		 
(		  
IMongoCollection		  0
<		0 1
ProductType		1 <
>		< =
typeCollection		> L
)		L M
{

 
bool 

checkTypes 
= 
typeCollection (
.( )
Find) -
(- .
b. /
=>0 2
true3 7
)7 8
.8 9
Any9 <
(< =
)= >
;> ?
string 
path 
= 
Path 
. 
Combine "
(" #
$str# )
,) *
$str+ 5
,5 6
$str7 C
)C D
;D E
if 

( 
! 

checkTypes 
) 
{ 	
var 
	typesData 
= 
File  
.  !
ReadAllText! ,
(, -
path- 1
)1 2
;2 3
var 
types 
= 
JsonSerializer &
.& '
Deserialize' 2
<2 3
List3 7
<7 8
ProductType8 C
>C D
>D E
(E F
	typesDataF O
)O P
;P Q
if 
( 
types 
is 
not 
null !
)! "
{ 
foreach 
( 
var 
item !
in" $
types% *
)* +
{ 
typeCollection "
." #
InsertOneAsync# 1
(1 2
item2 6
)6 7
;7 8
} 
} 
} 	
} 
} ´3
„/Users/eduardopelaez/RiderProjects/microservices_eShopping/Services/Catalog/Catalog.Infrastructure/Repositories/ProductRepository.cs
	namespace 	
Catalog
 
. 
Infrastructure  
.  !
Repositories! -
;- .
public 
class 
ProductRepository 
:  
IProductRepository! 3
,3 4
IBrandRepository5 E
,E F
ITypesRepositoryG W
{		 
private

 
readonly

 
ICatalogContext

 $
_context

% -
;

- .
public 

ProductRepository 
( 
ICatalogContext ,
catalogContext- ;
); <
{ 
_context 
= 
catalogContext !
;! "
} 
public 

async 
Task 
< 
IEnumerable !
<! "
Product" )
>) *
>* +
GetAllProducts, :
(: ;
); <
{ 
return 
await 
_context 
. 
Products 
. 
Find 
( 
p 
=> 
true 
) 
. 
ToListAsync 
( 
) 
; 
} 
public 

async 
Task 
< 
Product 
> 

GetProduct )
() *
string* 0
id1 3
)3 4
{ 
return 
await 
_context 
. 
Products 
. 
Find 
( 
p 
=> 
p 
. 
Id 
== 
id !
)! "
. 
FirstOrDefaultAsync  
(  !
)! "
;" #
} 
public!! 

async!! 
Task!! 
<!! 
IEnumerable!! !
<!!! "
Product!!" )
>!!) *
>!!* +
GetProductByName!!, <
(!!< =
string!!= C
name!!D H
)!!H I
{"" 
var## 
filter## 
=## 
Builders## 
<## 
Product## %
>##% &
.##& '
Filter##' -
.##- .
Eq##. 0
(##0 1
p##1 2
=>##3 5
p##6 7
.##7 8
Name##8 <
,##< =
name##> B
)##B C
;##C D
return$$ 
await$$ 
_context$$ 
.$$ 
Products$$ &
.$$& '
Find$$' +
($$+ ,
filter$$, 2
)$$2 3
.$$3 4
ToListAsync$$4 ?
($$? @
)$$@ A
;$$A B
}%% 
public'' 

async'' 
Task'' 
<'' 
IEnumerable'' !
<''! "
Product''" )
>'') *
>''* +
GetProductByBrand'', =
(''= >
string''> D
	brandName''E N
)''N O
{(( 
var)) 
filter)) 
=)) 
Builders)) 
<)) 
Product)) %
>))% &
.))& '
Filter))' -
.))- .
Eq)). 0
())0 1
p))1 2
=>))3 5
p))6 7
.))7 8
Brands))8 >
!))> ?
.))? @
Name))@ D
,))D E
	brandName))F O
)))O P
;))P Q
return** 
await** 
_context** 
.** 
Products** &
.**& '
Find**' +
(**+ ,
filter**, 2
)**2 3
.**3 4
ToListAsync**4 ?
(**? @
)**@ A
;**A B
}++ 
public-- 

async-- 
Task-- 
CreateProduct-- #
(--# $
Product--$ +
product--, 3
)--3 4
{.. 
await// 
_context// 
.// 
Products// 
.//  
InsertOneAsync//  .
(//. /
product/// 6
)//6 7
;//7 8
}00 
public22 

async22 
Task22 
UpdateProduct22 #
(22# $
Product22$ +
product22, 3
)223 4
{33 
await44 
_context44 
.55 
Products55 
.66 
ReplaceOneAsync66 
(66 
p66 
=>66 !
p66" #
.66# $
Id66$ &
==66' )
product66* 1
.661 2
Id662 4
,664 5
product666 =
)66= >
;66> ?
}77 
public99 

async99 
Task99 
DeleteProduct99 #
(99# $
string99$ *
id99+ -
)99- .
{:: 
var;; 
filter;; 
=;; 
Builders;; 
<;; 
Product;; %
>;;% &
.;;& '
Filter;;' -
.<< 
Eq<< 
(<< 
p<< 
=><< 
p<< 
.<< 
Id<< 
,<< 
id<< 
)<< 
;<< 
await>> 
_context>> 
.>> 
Products>> 
.>>  
DeleteOneAsync>>  .
(>>. /
filter>>/ 5
)>>5 6
;>>6 7
}?? 
publicAA 

asyncAA 
TaskAA 
<AA 
IEnumerableAA !
<AA! "
ProductBrandAA" .
>AA. /
>AA/ 0
GetAllBrandsAA1 =
(AA= >
)AA> ?
{BB 
returnCC 
awaitCC 
_contextCC 
.DD 
BrandsDD 
.EE 
FindEE 
(EE 
pEE 
=>EE 
trueEE 
)EE 
.FF 
ToListAsyncFF 
(FF 
)FF 
;FF 
}GG 
publicII 

asyncII 
TaskII 
<II 
IEnumerableII !
<II! "
ProductTypeII" -
>II- .
>II. /
GetAllTypesII0 ;
(II; <
)II< =
{JJ 
returnKK 
awaitKK 
_contextKK 
.LL 
TypesLL 
.MM 
FindMM 
(MM 
pMM 
=>MM 
trueMM 
)MM 
.NN 
ToListAsyncNN 
(NN 
)NN 
;NN 
}OO 
}PP 